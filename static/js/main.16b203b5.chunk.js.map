{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","imgs","value","copied","handleChange","bind","assertThisInitialized","getImages","url","that","options","uri","headers","User-Agent","Access-Control-Allow-Origin","rp","then","html","div","document","createElement","innerHTML","images","getElementsByTagName","imageDivs","i","length","console","log","src","push","setState","catch","err","e","change","target","name","status","method","Content-Type","user_key","key_type","json","repos","_this2","react_default","a","className","placeholder","onChange","map","lib","text","onCopy","height","width","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2XCqHzBC,cA7Gb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,GACNC,MAAO,GACPC,QAAQ,GAIVV,EAAKW,aAAeX,EAAKW,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACpBA,EAAKc,UAAYd,EAAKc,UAAUF,KAAfX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAVDA,yEAaRe,GACR,IAAIC,EAAOb,KAEPc,EAAU,CACZC,IAAKH,EACLI,QAAS,CACLC,aAAc,kBACdC,8BAA+B,MAIrCC,IAAGL,GACFM,KAAK,SAASC,GACb,IAAIC,EAAMC,SAASC,cAAc,OACjCF,EAAIG,UAAYJ,EAIhB,IAFA,IAAIK,EAASJ,EAAIK,qBAAqB,OAClCC,EAAY,GACRC,EAAE,EAAGA,EAAEH,EAAOI,OAAQD,IAC5BE,QAAQC,IAAIN,EAAOG,GAAGI,KACF,IAAjBP,EAAOG,GAAGI,KACXL,EAAUM,KAAKR,EAAOG,GAAGI,KAI7BpB,EAAKsB,SAAS,CACZ9B,KAAOuB,MAGVQ,MAAM,SAASC,GAEdN,QAAQC,IAAIK,0CAIHC,GACX,IAAIC,EAAS,GACbA,EAAOD,EAAEE,OAAOC,MAAQH,EAAEE,OAAOlC,MACjCN,KAAKmC,SAASI,GACO,IAAlBD,EAAEE,OAAOlC,OACVN,KAAKmC,SAAS,CACZO,OAAQ,KAGZ1C,KAAKW,UAAU2B,EAAEE,OAAOlC,mDAiBtBa,IAZc,CACZJ,IAAK,2CACL4B,OAAQ,OACR3B,QAAS,CACLC,aAAc,kBACd2B,eAAgB,mBAChBC,SAAY,sBACZC,SAAY,UAEhBC,MAAM,IAIL3B,KAAK,SAAU4B,GACZjB,QAAQC,IAAIgB,KAEfZ,MAAM,SAAUC,GACfN,QAAQC,IAAIK,sCAIX,IAAAY,EAAAjD,KACP,OACEkD,EAAAC,EAAA3B,cAAA,OAAK4B,UAAU,OACbF,EAAAC,EAAA3B,cAAA,UAAQ4B,UAAU,cAChBF,EAAAC,EAAA3B,cAAA,SAAOlB,MAAON,KAAKI,MAAMQ,IAAKyC,YAAY,wBAAwBD,UAAU,YAAYE,SAAUtD,KAAKQ,aAAciC,KAAK,SAGxHS,EAAAC,EAAA3B,cAAA,WACE0B,EAAAC,EAAA3B,cAAA,WACGxB,KAAKI,MAAMC,KAAKkD,IAAI,SAACtB,GAAD,OAEfiB,EAAAC,EAAA3B,cAACgC,EAAA,gBAAD,CAAiBC,KAAMxB,EACrByB,OAAQ,kBAAMT,EAAKd,SAAS,CAAC5B,QAAQ,MACrC2C,EAAAC,EAAA3B,cAAA,UAAQ4B,UAAU,eAAcF,EAAAC,EAAA3B,cAAA,OAAKS,IAAKA,EAAK0B,OAAO,MAAMC,MAAM,MAAMR,UAAU,2BAlGxFS,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAA3B,cAAC6C,EAAD,MAAS9C,SAAS+C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,KAAK,SAAAsD,GACjCA,EAAaC","file":"static/js/main.16b203b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport rp from 'request-promise';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      imgs: [],\n      value: '',\n      copied: false,\n  \n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.getImages = this.getImages.bind(this);\n  }\n\n  getImages(url){\n    var that = this;\n\n    var options = {\n      uri: url,\n      headers: {\n          'User-Agent': 'Request-Promise',\n          'Access-Control-Allow-Origin': '*'\n      },\n    };\n\n    rp(options)\n    .then(function(html){\n      var div = document.createElement('div');\n      div.innerHTML = html;\n      \n      var images = div.getElementsByTagName('img');\n      var imageDivs = []\n      for(var i=0; i<images.length; i++){\n        console.log(images[i].src)\n        if(images[i].src != \"\"){\n          imageDivs.push(images[i].src)\n        }\n        \n      }\n      that.setState({\n        imgs : imageDivs\n      })\n    })\n    .catch(function(err){\n      //handle error\n      console.log(err)\n    });\n  }\n\n  handleChange(e) {\n    let change = {}\n    change[e.target.name] = e.target.value\n    this.setState(change)\n    if(e.target.value == \"\"){\n      this.setState({\n        status: \"\"\n      })\n    }\n    this.getImages(e.target.value)\n  }\n\n\n  componentDidMount(){\n      var options = {\n        uri: 'https://api.upcitemdb.com/prod/v1/lookup',\n        method: 'post',\n        headers: {\n            'User-Agent': 'Request-Promise',\n            \"Content-Type\": \"application/json\",\n            \"user_key\": \"only_for_dev_or_pro\",\n            \"key_type\": \"3scale\"\n        },\n        json: true // Automatically parses the JSON string in the response\n      };\n    \n      rp(options)\n        .then(function (repos) {\n            console.log(repos);\n        })\n        .catch(function (err) {\n          console.log(err)\n        });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <input value={this.state.url} placeholder=\"enter image link here\" className=\"linkInput\" onChange={this.handleChange} name=\"url\"/>\n        </header>\n\n            <div>\n              <div>\n                {this.state.imgs.map((src) =>\n                      \n                      <CopyToClipboard text={src}\n                        onCopy={() => this.setState({copied: true})}>\n                        <button className=\"grid-button\"><img src={src} height=\"300\" width=\"300\" className=\"grid-img\"/></button>\n                      </CopyToClipboard>\n                    \n                )}\n              </div>\n            </div>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}